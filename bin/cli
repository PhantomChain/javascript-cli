#!/usr/bin/env node

const commander = require('commander')

const { message, wallet, network, transaction } = require('../lib/commands')

commander
  .version('2.0.0')

commander
  .command('wallet <address>')
  .description('Get status for wallet with <address>.')
  .option('-n, --network <network>', 'Connect to network: [mainnet|devnet]', 'mainnet')
  .option('-c, --node <node>', 'Connect directly to node <node>.')
  .option('-f, --format <format>', 'Specify how to format the output [json|table]', 'json')
  .option('-v, --verbose', 'Show verbose logging.')
  .action(async (address, cmd) => wallet.status(address, cmd))

commander
  .command('ledger')
  .description('Get status for the wallet(s) on a connected Ledger device.')
  .option('-n, --network <network>', 'Connect to network: [mainnet|devnet]', 'mainnet')
  .option('-c, --node <node>', 'Connect directly to node <node>.')
  .option('-f, --format <format>', 'Specify how to format the output [json|table]', 'json')
  .option('-v, --verbose', 'Show verbose logging.')
  .action(async (cmd) => wallet.ledger(cmd))

commander
  .command('address')
  .description('Get the address that is derived from a passphrase.')
  .option('-n, --network <network>', 'Connect to network: [mainnet|devnet]', 'mainnet')
  .option('-f, --format <format>', 'Specify how to format the output [json|table]', 'json')
  .option('-p, --passphrase [passphrase]', 'Enter the passphrase, if you do not enter e passphrase you will be prompted for it.')
  .action(async (cmd) => wallet.address(cmd))

commander
  .command('create')
  .description('Create a new wallet.')
  .option('-n, --network <network>', 'Create a wallet for network: [mainnet|devnet]', 'mainnet')
  .option('-f, --format <format>', 'Specify how to format the output [json|table]', 'json')
  .option('--vanity <vanity>', 'Create a vanity wallet that contains lowercase <vanity> (WARNING: this could take a long time).')
  .action(async (cmd) => {
    if (cmd.vanity) {
      await wallet.vanity(cmd)
      return
    }
    await wallet.create(cmd)
  })

commander
  .command('send <amount> <recepient>')
  .description('Send <amount> to <recepient>. Valid <amount> format examples: 10, USD10.4, EUR10000, 10000.4')
  .option('-n, --network <network>', 'Connect to network: [mainnet|devnet]', 'mainnet')
  .option('-c, --node <node>', 'Connect directly to node <node>.')
  .option('-f, --format <format>', 'Specify how to format the output [json|table]', 'json')
  .option('-v, --verbose', 'Show verbose logging.')
  .option('-p, --passphrase [passphrase]', 'Enter your passphrase, if you do not enter e passphrase you will be prompted for it.')
  .option('-l, --ledger', 'Use your Ledger device instead of a passphrase.')
  .option('-s, --signature [signature]', 'Enter your second signature, if you do not enter one you will be prompted for it.')
  .option('-b, --smartbridge [smartbridge]', 'Enter a string for the SmartBridge.')
  .option('--fee [fee]', 'Specify a dynamic fee in Phantomtoshis. Defaults to 10000000 = 0.1 XPH.')
  .option('-i, --interactive', 'Prompt to confirm transaction.')
  .action(async (amount, recepient, cmd) => wallet.send(amount, recepient, cmd))

commander
  .command('vote <delegate>')
  .description('Vote for <delegate>.')
  .option('-n, --network <network>', 'Connect to network: [mainnet|devnet]', 'mainnet')
  .option('-c, --node <node>', 'Connect directly to node <node>.')
  .option('-f, --format <format>', 'Specify how to format the output [json|table]', 'json')
  .option('-v, --verbose', 'Show verbose logging.')
  .option('-p, --passphrase [passphrase]', 'Enter your passphrase, if you do not enter e passphrase you will be prompted for it.')
  .option('-l, --ledger', 'Use your Ledger device instead of a passphrase.')
  .option('-s, --signature [signature]', 'Enter your second signature, if you do not enter one you will be prompted for it.')
  .option('--fee [fee]', 'Specify a dynamic fee in Phantomtoshis. Defaults to 100000000 = 1 XPH.')
  .option('-i, --interactive', 'Prompt to confirm transaction.')
  .action(async (delegate, cmd) => wallet.vote(delegate, cmd))

commander
  .command('unvote')
  .description('Unvote for the currently voted delegate.')
  .option('-n, --network <network>', 'Connect to network: [mainnet|devnet]', 'mainnet')
  .option('-c, --node <node>', 'Connect directly to node <node>.')
  .option('-f, --format <format>', 'Specify how to format the output [json|table]', 'json')
  .option('-v, --verbose', 'Show verbose logging.')
  .option('-p, --passphrase [passphrase]', 'Enter your passphrase, if you do not enter e passphrase you will be prompted for it.')
  .option('-l, --ledger', 'Use your Ledger device instead of a passphrase.')
  .option('-s, --signature [signature]', 'Enter your second signature, if you do not enter one you will be prompted for it.')
  .option('--fee [fee]', 'Specify a dynamic fee in Phantomtoshis. Defaults to 100000000 = 1 XPH.')
  .option('-i, --interactive', 'Prompt to confirm transaction.')
  .action(async (cmd) => wallet.unvote(cmd))

commander
  .command('delegate <username>')
  .description('Register as delegate with <username>.')
  .option('-n, --network <network>', 'Connect to network: [mainnet|devnet]', 'mainnet')
  .option('-c, --node <node>', 'Connect directly to node <node>.')
  .option('-f, --format <format>', 'Specify how to format the output [json|table]', 'json')
  .option('-v, --verbose', 'Show verbose logging.')
  .option('-p, --passphrase [passphrase]', 'Enter your passphrase, if you do not enter e passphrase you will be prompted for it.')
  .option('-s, --signature [signature]', 'Enter your second signature, if you do not enter one you will be prompted for it.')
  .option('--fee [fee]', 'Specify a dynamic fee in Phantomtoshis. Defaults to 2500000000 = 25 XPH.')
  .option('-i, --interactive', 'Prompt to confirm transaction.')
  .action(async (username, cmd) => wallet.delegate(username, cmd))

commander
  .command('signature [signature]')
  .description('Create a second signature.')
  .option('-n, --network <network>', 'Connect to network: [mainnet|devnet]', 'mainnet')
  .option('-c, --node <node>', 'Connect directly to node <node>.')
  .option('-f, --format <format>', 'Specify how to format the output [json|table]', 'json')
  .option('-v, --verbose', 'Show verbose logging.')
  .option('-p, --passphrase [passphrase]', 'Enter your passphrase, if you do not enter e passphrase you will be prompted for it.')
  .option('--fee [fee]', 'Specify a dynamic fee in Phantomtoshis. Defaults to 500000000 = 5 XPH.')
  .option('-i, --interactive', 'Prompt to confirm transaction.')
  .action(async (signature, cmd) => wallet.signature(signature, cmd))

commander
  .command('multisignature [multisignature]')
  .description('Create a multisignature.')
  .option('-n, --network <network>', 'Connect to network: [mainnet|devnet]', 'mainnet')
  .option('-c, --node <node>', 'Connect directly to node <node>.')
  .option('-f, --format <format>', 'Specify how to format the output [json|table]', 'json')
  .option('-v, --verbose', 'Show verbose logging.')
  .option('-p, --passphrase [passphrase]', 'Enter your passphrase, if you do not enter e passphrase you will be prompted for it.')
  .option('-l, --ledger', 'Use your Ledger device instead of a passphrase.')
  .option('-s, --signature [signature]', 'Enter your second signature, if you do not enter one you will be prompted for it.')
  .option('-i, --interactive', 'Prompt to confirm transaction.')
  .action(async (multisignature, cmd) => wallet.multisignature(multisignature, cmd))

commander
  .command('stats')
  .description('Get the network stats.')
  .option('-n, --network <network>', 'Connect to network: [mainnet|devnet]', 'mainnet')
  .option('-c, --node <node>', 'Connect directly to node <node>.')
  .option('-f, --format <format>', 'Specify how to format the output [json|table]', 'json')
  .option('-v, --verbose', 'Show verbose logging.')
  .action(async (cmd) => network.stats(cmd))

commander
  .command('sign <msg>')
  .description('Sign message <msg>.')
  .option('-n, --network <network>', 'Connect to network: [mainnet|devnet]', 'mainnet')
  .option('-f, --format <format>', 'Specify how to format the output [json|table]', 'json')
  .option('-v, --verbose', 'Show verbose logging.')
  .option('-p, --passphrase [passphrase]', 'Enter your passphrase, if you do not enter e passphrase you will be prompted for it.')
  .action(async (msg, cmd) => message.sign(msg, cmd))

commander
  .command('verify <msg> <publicKey> <signature>')
  .description('Verify message <msg> with <signature> which was signed with <publicKey>.')
  .option('-n, --network <network>', 'Connect to network: [mainnet|devnet]', 'mainnet')
  .option('-f, --format <format>', 'Specify how to format the output [json|table]', 'json')
  .option('-v, --verbose', 'Show verbose logging.')
  .action(async (msg, publicKey, signature, cmd) => message.verify(msg, publicKey, signature, cmd))

commander
  .command('transaction <transactionId>')
  .description('Get status for transaction with <transactionId>.')
  .option('-n, --network <network>', 'Connect to network: [mainnet|devnet]', 'mainnet')
  .option('-c, --node <node>', 'Connect directly to node <node>.')
  .option('-f, --format <format>', 'Specify how to format the output [json|table]', 'json')
  .option('-v, --verbose', 'Show verbose logging.')
  .action(async (transactionId, cmd) => transaction.status(transactionId, cmd))

if (!process.argv.slice(2).length) {
  commander.outputHelp()

  process.exit()
}

commander.parse(process.argv)
